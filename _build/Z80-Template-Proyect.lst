                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.4.0 #8981 (Jul 12 2014) (Linux)
                              4 ; This file was generated Tue Dec  1 19:45:35 2015
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mz80
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _isr_vector38
                             14 	.globl _isr_vector66
                             15 	.globl _isprint
                             16 	.globl ___ret_aux
                             17 	.globl _io_write
                             18 	.globl _io_read
                             19 	.globl _io_write_buffer
                             20 	.globl _io_read_buffer
                             21 	.globl _uart_init
                             22 	.globl _uart_set_baudrate
                             23 	.globl _uart_write
                             24 	.globl _uart_read
                             25 	.globl _uart_print
                             26 	.globl _uart_read_line
                             27 	.globl _uart_disable_interrupts
                             28 	.globl _uart_enable_interrupts
                             29 	.globl _ppi_init
                             30 	.globl _ppi_set_portc_bit
                             31 	.globl _ppi_clear_portc_bit
                             32 	.globl _delay_10us
                             33 	.globl _delay_100us
                             34 	.globl _delay_ms
                             35 	.globl _putchar
                             36 	.globl _getchar
                             37 	.globl _system_init
                             38 	.globl _lcd_init
                             39 	.globl _writeRegister24
                             40 	.globl _writeRegister32
                             41 	.globl _writeRegister16
                             42 	.globl _write8
                             43 	.globl _setAddrWindow
                             44 ;--------------------------------------------------------
                             45 ; special function registers
                             46 ;--------------------------------------------------------
                     0010    47 _URRBR	=	0x0010
                     0010    48 _URTHR	=	0x0010
                     0011    49 _URIER	=	0x0011
                     0012    50 _URIIR	=	0x0012
                     0013    51 _URLCR	=	0x0013
                     0015    52 _URLSR	=	0x0015
                     0014    53 _URMCR	=	0x0014
                     0016    54 _URMSR	=	0x0016
                     0010    55 _URDLL	=	0x0010
                     0011    56 _URDLM	=	0x0011
                     0040    57 _PPI_PORTA	=	0x0040
                     0041    58 _PPI_PORTB	=	0x0041
                     0042    59 _PPI_PORTC	=	0x0042
                     0043    60 _PPI_CTRL	=	0x0043
                             61 ;--------------------------------------------------------
                             62 ; ram data
                             63 ;--------------------------------------------------------
                             64 	.area _DATA
   0000                      65 ___ret_aux::
   0000                      66 	.ds 1
                             67 ;--------------------------------------------------------
                             68 ; ram data
                             69 ;--------------------------------------------------------
                             70 	.area _INITIALIZED
                             71 ;--------------------------------------------------------
                             72 ; absolute external ram data
                             73 ;--------------------------------------------------------
                             74 	.area _DABS (ABS)
                             75 ;--------------------------------------------------------
                             76 ; global & static initialisations
                             77 ;--------------------------------------------------------
                             78 	.area _HOME
                             79 	.area _GSINIT
                             80 	.area _GSFINAL
                             81 	.area _GSINIT
                             82 ;--------------------------------------------------------
                             83 ; Home
                             84 ;--------------------------------------------------------
                             85 	.area _HOME
                             86 	.area _HOME
                             87 ;--------------------------------------------------------
                             88 ; code
                             89 ;--------------------------------------------------------
                             90 	.area _CODE
                             91 ;smz80.h:631: void io_write(char port_addr, char data){
                             92 ;	---------------------------------
                             93 ; Function io_write
                             94 ; ---------------------------------
   0000                      95 _io_write_start::
   0000                      96 _io_write:
                             97 ;smz80.h:642: __endasm;
   0000 DD 21 02 00   [14]   98 	ld ix, #2
   0004 DD 39         [15]   99 	add ix,sp
   0006 DD 4E 00      [19]  100 	ld c, (ix)
   0009 DD 23         [10]  101 	inc ix
   000B DD 7E 00      [19]  102 	ld a,(ix)
   000E ED 79         [12]  103 	out (c), a
   0010 C9            [10]  104 	ret
   0011                     105 _io_write_end::
                            106 ;smz80.h:649: char io_read(char port_addr){
                            107 ;	---------------------------------
                            108 ; Function io_read
                            109 ; ---------------------------------
   0011                     110 _io_read_start::
   0011                     111 _io_read:
                            112 ;smz80.h:661: __endasm;
   0011 DD 21 02 00   [14]  113 	LD IX, #2
   0015 DD 39         [15]  114 	ADD IX,SP
   0017 DD 4E 00      [19]  115 	LD C, (IX)
   001A ED 78         [12]  116 	IN A,(C)
   001C 32r00r00      [13]  117 	LD (___ret_aux),A
                            118 ;smz80.h:663: return __ret_aux;
   001F FD 21r00r00   [14]  119 	ld	iy,#___ret_aux
   0023 FD 6E 00      [19]  120 	ld	l,0 (iy)
   0026 C9            [10]  121 	ret
   0027                     122 _io_read_end::
                            123 ;smz80.h:666: void io_write_buffer(char port_addr, char* buffer_out, char count){
                            124 ;	---------------------------------
                            125 ; Function io_write_buffer
                            126 ; ---------------------------------
   0027                     127 _io_write_buffer_start::
   0027                     128 _io_write_buffer:
                            129 ;smz80.h:682: __endasm;
   0027 DD 21 02 00   [14]  130 	LD IX, #2
   002B DD 39         [15]  131 	ADD IX,SP
   002D DD 4E 00      [19]  132 	LD C, (IX)
   0030 DD 23         [10]  133 	INC IX
   0032 DD 6E 00      [19]  134 	LD L,(IX)
   0035 DD 23         [10]  135 	INC IX
   0037 DD 66 00      [19]  136 	LD H,(IX)
   003A DD 23         [10]  137 	INC IX
   003C DD 46 00      [19]  138 	LD B,(IX)
   003F ED B3         [21]  139 	OTIR
   0041 C9            [10]  140 	ret
   0042                     141 _io_write_buffer_end::
                            142 ;smz80.h:685: void io_read_buffer(char port_addr, char* buffer_in, char count){
                            143 ;	---------------------------------
                            144 ; Function io_read_buffer
                            145 ; ---------------------------------
   0042                     146 _io_read_buffer_start::
   0042                     147 _io_read_buffer:
                            148 ;smz80.h:702: __endasm;
   0042 DD 21 02 00   [14]  149 	LD IX, #2
   0046 DD 39         [15]  150 	ADD IX,SP
   0048 DD 4E 00      [19]  151 	LD C, (IX)
   004B DD 23         [10]  152 	INC IX
   004D DD 6E 00      [19]  153 	LD L,(IX)
   0050 DD 23         [10]  154 	INC IX
   0052 DD 66 00      [19]  155 	LD H,(IX)
   0055 DD 23         [10]  156 	INC IX
   0057 DD 46 00      [19]  157 	LD B,(IX)
   005A ED B2         [21]  158 	INIR
   005C C9            [10]  159 	ret
   005D                     160 _io_read_buffer_end::
                            161 ;smz80.h:705: void uart_init(const uart_cfg_t *uart_config){
                            162 ;	---------------------------------
                            163 ; Function uart_init
                            164 ; ---------------------------------
   005D                     165 _uart_init_start::
   005D                     166 _uart_init:
   005D DD E5         [15]  167 	push	ix
   005F DD 21 00 00   [14]  168 	ld	ix,#0
   0063 DD 39         [15]  169 	add	ix,sp
                            170 ;smz80.h:708: uart_set_baudrate(uart_config->baudrate);
   0065 DD 5E 04      [19]  171 	ld	e,4 (ix)
   0068 DD 56 05      [19]  172 	ld	d,5 (ix)
   006B 1A            [ 7]  173 	ld	a,(de)
   006C D5            [11]  174 	push	de
   006D F5            [11]  175 	push	af
   006E 33            [ 6]  176 	inc	sp
   006F CDr93r00      [17]  177 	call	_uart_set_baudrate
   0072 33            [ 6]  178 	inc	sp
   0073 D1            [10]  179 	pop	de
                            180 ;smz80.h:710: URIER = uart_config->interrupt;
   0074 6B            [ 4]  181 	ld	l, e
   0075 62            [ 4]  182 	ld	h, d
   0076 01 04 00      [10]  183 	ld	bc, #0x0004
   0079 09            [11]  184 	add	hl, bc
   007A 7E            [ 7]  185 	ld	a,(hl)
   007B D3 11         [11]  186 	out	(_URIER),a
                            187 ;smz80.h:712: URLCR = (uart_config->stop_bits) | (uart_config->parity) | (uart_config->word_length);
   007D 6B            [ 4]  188 	ld	l, e
   007E 62            [ 4]  189 	ld	h, d
   007F 23            [ 6]  190 	inc	hl
   0080 46            [ 7]  191 	ld	b,(hl)
   0081 6B            [ 4]  192 	ld	l, e
   0082 62            [ 4]  193 	ld	h, d
   0083 23            [ 6]  194 	inc	hl
   0084 23            [ 6]  195 	inc	hl
   0085 7E            [ 7]  196 	ld	a,(hl)
   0086 B0            [ 4]  197 	or	a, b
   0087 62            [ 4]  198 	ld	h,d
   0088 6B            [ 4]  199 	ld	l, e
   0089 23            [ 6]  200 	inc	hl
   008A 23            [ 6]  201 	inc	hl
   008B 23            [ 6]  202 	inc	hl
   008C 56            [ 7]  203 	ld	d,(hl)
   008D B2            [ 4]  204 	or	a, d
   008E D3 13         [11]  205 	out	(_URLCR),a
   0090 DD E1         [14]  206 	pop	ix
   0092 C9            [10]  207 	ret
   0093                     208 _uart_init_end::
                            209 ;smz80.h:715: void uart_set_baudrate(const uart_baudrate_t baudrate){
                            210 ;	---------------------------------
                            211 ; Function uart_set_baudrate
                            212 ; ---------------------------------
   0093                     213 _uart_set_baudrate_start::
   0093                     214 _uart_set_baudrate:
                            215 ;smz80.h:718: URLCR |= BV(UDLAB);
   0093 DB 13         [11]  216 	in	a,(_URLCR)
   0095 CB FF         [ 8]  217 	set	7, a
   0097 D3 13         [11]  218 	out	(_URLCR),a
                            219 ;smz80.h:720: URDLL = baudrate;
   0099 21 02 00      [10]  220 	ld	hl, #2+0
   009C 39            [11]  221 	add	hl, sp
   009D 7E            [ 7]  222 	ld	a, (hl)
   009E D3 10         [11]  223 	out	(_URDLL),a
                            224 ;smz80.h:722: URDLM = ((uint16_t)baudrate)>>8;
   00A0 3E 00         [ 7]  225 	ld	a, #0x00
   00A2 D3 11         [11]  226 	out	(_URDLM),a
                            227 ;smz80.h:724: URLCR &= ~BV(UDLAB);
   00A4 DB 13         [11]  228 	in	a,(_URLCR)
   00A6 E6 7F         [ 7]  229 	and	a, #0x7F
   00A8 D3 13         [11]  230 	out	(_URLCR),a
   00AA C9            [10]  231 	ret
   00AB                     232 _uart_set_baudrate_end::
                            233 ;smz80.h:727: void uart_write(char c){
                            234 ;	---------------------------------
                            235 ; Function uart_write
                            236 ; ---------------------------------
   00AB                     237 _uart_write_start::
   00AB                     238 _uart_write:
                            239 ;smz80.h:730: while( !(URLSR & BV(UTHRE)))
   00AB                     240 00101$:
   00AB DB 15         [11]  241 	in	a,(_URLSR)
   00AD E6 20         [ 7]  242 	and	a, #0x20
   00AF 20 03         [12]  243 	jr	NZ,00103$
                            244 ;smz80.h:731: NOP();    
   00B1 00            [ 4]  245 	NOP
   00B2 18 F7         [12]  246 	jr	00101$
   00B4                     247 00103$:
                            248 ;smz80.h:733: URTHR = c;
   00B4 21 02 00      [10]  249 	ld	hl, #2+0
   00B7 39            [11]  250 	add	hl, sp
   00B8 7E            [ 7]  251 	ld	a, (hl)
   00B9 D3 10         [11]  252 	out	(_URTHR),a
   00BB C9            [10]  253 	ret
   00BC                     254 _uart_write_end::
                            255 ;smz80.h:736: char uart_read(){
                            256 ;	---------------------------------
                            257 ; Function uart_read
                            258 ; ---------------------------------
   00BC                     259 _uart_read_start::
   00BC                     260 _uart_read:
                            261 ;smz80.h:739: while(!(URLSR & BV(UDR))) 
   00BC                     262 00101$:
   00BC DB 15         [11]  263 	in	a,(_URLSR)
   00BE 0F            [ 4]  264 	rrca
   00BF 38 03         [12]  265 	jr	C,00103$
                            266 ;smz80.h:740: NOP();
   00C1 00            [ 4]  267 	NOP
   00C2 18 F8         [12]  268 	jr	00101$
   00C4                     269 00103$:
                            270 ;smz80.h:742: return URRBR;
   00C4 DB 10         [11]  271 	in	a,(_URRBR)
   00C6 6F            [ 4]  272 	ld	l,a
   00C7 C9            [10]  273 	ret
   00C8                     274 _uart_read_end::
                            275 ;smz80.h:745: void uart_print(const char* str){
                            276 ;	---------------------------------
                            277 ; Function uart_print
                            278 ; ---------------------------------
   00C8                     279 _uart_print_start::
   00C8                     280 _uart_print:
                            281 ;smz80.h:748: while(*str)       
   00C8 C1            [10]  282 	pop	bc
   00C9 E1            [10]  283 	pop	hl
   00CA E5            [11]  284 	push	hl
   00CB C5            [11]  285 	push	bc
   00CC                     286 00101$:
   00CC 7E            [ 7]  287 	ld	a,(hl)
   00CD B7            [ 4]  288 	or	a, a
   00CE C8            [11]  289 	ret	Z
                            290 ;smz80.h:749: putchar(*str++); // envía el siguiente caracter. 
   00CF 23            [ 6]  291 	inc	hl
   00D0 E5            [11]  292 	push	hl
   00D1 F5            [11]  293 	push	af
   00D2 33            [ 6]  294 	inc	sp
   00D3 CDrFFr01      [17]  295 	call	_putchar
   00D6 33            [ 6]  296 	inc	sp
   00D7 E1            [10]  297 	pop	hl
   00D8 18 F2         [12]  298 	jr	00101$
   00DA C9            [10]  299 	ret
   00DB                     300 _uart_print_end::
                            301 ;smz80.h:752: int uart_read_line(char* str){
                            302 ;	---------------------------------
                            303 ; Function uart_read_line
                            304 ; ---------------------------------
   00DB                     305 _uart_read_line_start::
   00DB                     306 _uart_read_line:
   00DB DD E5         [15]  307 	push	ix
   00DD DD 21 00 00   [14]  308 	ld	ix,#0
   00E1 DD 39         [15]  309 	add	ix,sp
                            310 ;smz80.h:754: int n=0;
   00E3 01 00 00      [10]  311 	ld	bc,#0x0000
                            312 ;smz80.h:756: while(n<MAXLINE-1 && (c=getchar()) != '\n' && c !='\r'){
   00E6                     313 00111$:
   00E6 79            [ 4]  314 	ld	a,c
   00E7 D6 63         [ 7]  315 	sub	a, #0x63
   00E9 78            [ 4]  316 	ld	a,b
   00EA 17            [ 4]  317 	rla
   00EB 3F            [ 4]  318 	ccf
   00EC 1F            [ 4]  319 	rra
   00ED DE 80         [ 7]  320 	sbc	a, #0x80
   00EF 30 70         [12]  321 	jr	NC,00113$
   00F1 C5            [11]  322 	push	bc
   00F2 CDr1Cr02      [17]  323 	call	_getchar
   00F5 7D            [ 4]  324 	ld	a,l
   00F6 C1            [10]  325 	pop	bc
   00F7 57            [ 4]  326 	ld	d,a
   00F8 D6 0A         [ 7]  327 	sub	a, #0x0A
   00FA 28 65         [12]  328 	jr	Z,00113$
                            329 ;smz80.h:758: if(c == 0x7F || c==0x08){
   00FC 7A            [ 4]  330 	ld	a,d
   00FD FE 0D         [ 7]  331 	cp	a,#0x0D
   00FF 28 60         [12]  332 	jr	Z,00113$
   0101 FE 7F         [ 7]  333 	cp	a,#0x7F
   0103 28 04         [12]  334 	jr	Z,00105$
   0105 D6 08         [ 7]  335 	sub	a, #0x08
   0107 20 2D         [12]  336 	jr	NZ,00106$
   0109                     337 00105$:
                            338 ;smz80.h:760: if(n>0){
   0109 AF            [ 4]  339 	xor	a, a
   010A B9            [ 4]  340 	cp	a, c
   010B 98            [ 4]  341 	sbc	a, b
   010C E2r11r01      [10]  342 	jp	PO, 00149$
   010F EE 80         [ 7]  343 	xor	a, #0x80
   0111                     344 00149$:
   0111 F2rE6r00      [10]  345 	jp	P,00111$
                            346 ;smz80.h:761: str[--n]='\0';
   0114 0B            [ 6]  347 	dec	bc
   0115 DD 6E 04      [19]  348 	ld	l,4 (ix)
   0118 DD 66 05      [19]  349 	ld	h,5 (ix)
   011B 09            [11]  350 	add	hl,bc
   011C 36 00         [10]  351 	ld	(hl),#0x00
                            352 ;smz80.h:762: putchar(c);
   011E C5            [11]  353 	push	bc
   011F D5            [11]  354 	push	de
   0120 D5            [11]  355 	push	de
   0121 33            [ 6]  356 	inc	sp
   0122 CDrFFr01      [17]  357 	call	_putchar
   0125 33            [ 6]  358 	inc	sp
   0126 3E 20         [ 7]  359 	ld	a,#0x20
   0128 F5            [11]  360 	push	af
   0129 33            [ 6]  361 	inc	sp
   012A CDrFFr01      [17]  362 	call	_putchar
   012D 33            [ 6]  363 	inc	sp
   012E 33            [ 6]  364 	inc	sp
   012F CDrFFr01      [17]  365 	call	_putchar
   0132 33            [ 6]  366 	inc	sp
   0133 C1            [10]  367 	pop	bc
   0134 18 B0         [12]  368 	jr	00111$
   0136                     369 00106$:
                            370 ;smz80.h:768: if(isprint(c))
   0136 7A            [ 4]  371 	ld	a,d
   0137 6F            [ 4]  372 	ld	l,a
   0138 17            [ 4]  373 	rla
   0139 9F            [ 4]  374 	sbc	a, a
   013A 67            [ 4]  375 	ld	h,a
   013B C5            [11]  376 	push	bc
   013C D5            [11]  377 	push	de
   013D E5            [11]  378 	push	hl
   013E CDr00r00      [17]  379 	call	_isprint
   0141 F1            [10]  380 	pop	af
   0142 D1            [10]  381 	pop	de
   0143 C1            [10]  382 	pop	bc
   0144 7C            [ 4]  383 	ld	a,h
   0145 B5            [ 4]  384 	or	a,l
   0146 28 9E         [12]  385 	jr	Z,00111$
                            386 ;smz80.h:770: str[n++]=c;
   0148 61            [ 4]  387 	ld	h,c
   0149 58            [ 4]  388 	ld	e,b
   014A 03            [ 6]  389 	inc	bc
   014B DD 7E 04      [19]  390 	ld	a,4 (ix)
   014E 84            [ 4]  391 	add	a, h
   014F 6F            [ 4]  392 	ld	l,a
   0150 DD 7E 05      [19]  393 	ld	a,5 (ix)
   0153 8B            [ 4]  394 	adc	a, e
   0154 67            [ 4]  395 	ld	h,a
   0155 72            [ 7]  396 	ld	(hl),d
                            397 ;smz80.h:771: putchar(c);
   0156 C5            [11]  398 	push	bc
   0157 D5            [11]  399 	push	de
   0158 33            [ 6]  400 	inc	sp
   0159 CDrFFr01      [17]  401 	call	_putchar
   015C 33            [ 6]  402 	inc	sp
   015D C1            [10]  403 	pop	bc
   015E C3rE6r00      [10]  404 	jp	00111$
   0161                     405 00113$:
                            406 ;smz80.h:775: str[n]='\0';     
   0161 DD 6E 04      [19]  407 	ld	l,4 (ix)
   0164 DD 66 05      [19]  408 	ld	h,5 (ix)
   0167 09            [11]  409 	add	hl,bc
   0168 36 00         [10]  410 	ld	(hl),#0x00
                            411 ;smz80.h:776: putchar('\n');
   016A C5            [11]  412 	push	bc
   016B 3E 0A         [ 7]  413 	ld	a,#0x0A
   016D F5            [11]  414 	push	af
   016E 33            [ 6]  415 	inc	sp
   016F CDrFFr01      [17]  416 	call	_putchar
   0172 33            [ 6]  417 	inc	sp
                            418 ;smz80.h:777: return n;
   0173 E1            [10]  419 	pop	hl
   0174 DD E1         [14]  420 	pop	ix
   0176 C9            [10]  421 	ret
   0177                     422 _uart_read_line_end::
                            423 ;smz80.h:780: void uart_disable_interrupts(){
                            424 ;	---------------------------------
                            425 ; Function uart_disable_interrupts
                            426 ; ---------------------------------
   0177                     427 _uart_disable_interrupts_start::
   0177                     428 _uart_disable_interrupts:
                            429 ;smz80.h:782: URIER = 0;
   0177 3E 00         [ 7]  430 	ld	a,#0x00
   0179 D3 11         [11]  431 	out	(_URIER),a
   017B C9            [10]  432 	ret
   017C                     433 _uart_disable_interrupts_end::
                            434 ;smz80.h:785: void uart_enable_interrupts(uart_interrupt_t int_cfg){
                            435 ;	---------------------------------
                            436 ; Function uart_enable_interrupts
                            437 ; ---------------------------------
   017C                     438 _uart_enable_interrupts_start::
   017C                     439 _uart_enable_interrupts:
                            440 ;smz80.h:787: URIER = int_cfg;
   017C 21 02 00      [10]  441 	ld	hl, #2+0
   017F 39            [11]  442 	add	hl, sp
   0180 7E            [ 7]  443 	ld	a, (hl)
   0181 D3 11         [11]  444 	out	(_URIER),a
   0183 C9            [10]  445 	ret
   0184                     446 _uart_enable_interrupts_end::
                            447 ;smz80.h:792: void ppi_init(const ppi_cfg_t *ppi_config){
                            448 ;	---------------------------------
                            449 ; Function ppi_init
                            450 ; ---------------------------------
   0184                     451 _ppi_init_start::
   0184                     452 _ppi_init:
   0184 DD E5         [15]  453 	push	ix
   0186 DD 21 00 00   [14]  454 	ld	ix,#0
   018A DD 39         [15]  455 	add	ix,sp
                            456 ;smz80.h:794: PPI_CTRL = 0x80 | ppi_config->mode | (ppi_config->pcl_dir << PCPCL) | (ppi_config->pch_dir << PCPCH) | (ppi_config->pa_dir << PCPA) | (ppi_config->pb_dir << PCPB);
   018C DD 4E 04      [19]  457 	ld	c,4 (ix)
   018F DD 46 05      [19]  458 	ld	b,5 (ix)
   0192 0A            [ 7]  459 	ld	a,(bc)
   0193 CB FF         [ 8]  460 	set	7, a
   0195 5F            [ 4]  461 	ld	e,a
   0196 C5            [11]  462 	push	bc
   0197 FD E1         [14]  463 	pop	iy
   0199 FD 7E 03      [19]  464 	ld	a,3 (iy)
   019C B3            [ 4]  465 	or	a, e
   019D 5F            [ 4]  466 	ld	e,a
   019E C5            [11]  467 	push	bc
   019F FD E1         [14]  468 	pop	iy
   01A1 FD 7E 04      [19]  469 	ld	a,4 (iy)
   01A4 07            [ 4]  470 	rlca
   01A5 07            [ 4]  471 	rlca
   01A6 07            [ 4]  472 	rlca
   01A7 E6 F8         [ 7]  473 	and	a,#0xF8
   01A9 B3            [ 4]  474 	or	a, e
   01AA 5F            [ 4]  475 	ld	e,a
   01AB 69            [ 4]  476 	ld	l, c
   01AC 60            [ 4]  477 	ld	h, b
   01AD 23            [ 6]  478 	inc	hl
   01AE 7E            [ 7]  479 	ld	a,(hl)
   01AF 07            [ 4]  480 	rlca
   01B0 07            [ 4]  481 	rlca
   01B1 07            [ 4]  482 	rlca
   01B2 07            [ 4]  483 	rlca
   01B3 E6 F0         [ 7]  484 	and	a,#0xF0
   01B5 B3            [ 4]  485 	or	a, e
   01B6 57            [ 4]  486 	ld	d,a
   01B7 69            [ 4]  487 	ld	l, c
   01B8 60            [ 4]  488 	ld	h, b
   01B9 23            [ 6]  489 	inc	hl
   01BA 23            [ 6]  490 	inc	hl
   01BB 7E            [ 7]  491 	ld	a,(hl)
   01BC 87            [ 4]  492 	add	a, a
   01BD B2            [ 4]  493 	or	a, d
   01BE D3 43         [11]  494 	out	(_PPI_CTRL),a
   01C0 DD E1         [14]  495 	pop	ix
   01C2 C9            [10]  496 	ret
   01C3                     497 _ppi_init_end::
                            498 ;smz80.h:797: void ppi_set_portc_bit(const char bit){
                            499 ;	---------------------------------
                            500 ; Function ppi_set_portc_bit
                            501 ; ---------------------------------
   01C3                     502 _ppi_set_portc_bit_start::
   01C3                     503 _ppi_set_portc_bit:
                            504 ;smz80.h:799: PPI_CTRL = 1 | bit << 1;
   01C3 21 02 00      [10]  505 	ld	hl, #2+0
   01C6 39            [11]  506 	add	hl, sp
   01C7 7E            [ 7]  507 	ld	a, (hl)
   01C8 87            [ 4]  508 	add	a, a
   01C9 CB C7         [ 8]  509 	set	0, a
   01CB D3 43         [11]  510 	out	(_PPI_CTRL),a
   01CD C9            [10]  511 	ret
   01CE                     512 _ppi_set_portc_bit_end::
                            513 ;smz80.h:802: void ppi_clear_portc_bit(const char bit){
                            514 ;	---------------------------------
                            515 ; Function ppi_clear_portc_bit
                            516 ; ---------------------------------
   01CE                     517 _ppi_clear_portc_bit_start::
   01CE                     518 _ppi_clear_portc_bit:
                            519 ;smz80.h:804: PPI_CTRL = bit << 1;
   01CE 21 02 00      [10]  520 	ld	hl, #2+0
   01D1 39            [11]  521 	add	hl, sp
   01D2 7E            [ 7]  522 	ld	a, (hl)
   01D3 87            [ 4]  523 	add	a, a
   01D4 D3 43         [11]  524 	out	(_PPI_CTRL),a
   01D6 C9            [10]  525 	ret
   01D7                     526 _ppi_clear_portc_bit_end::
                            527 ;smz80.h:807: void delay_10us(){
                            528 ;	---------------------------------
                            529 ; Function delay_10us
                            530 ; ---------------------------------
   01D7                     531 _delay_10us_start::
   01D7                     532 _delay_10us:
                            533 ;smz80.h:817: __endasm;
   01D7 D9            [ 4]  534 	EXX
   01D8 08            [ 4]  535 	EX AF,AF'
   01D9 06 02         [ 7]  536 	LD B,#0x2
   01DB                     537 	    LOOP_10:
   01DB 10 FE         [13]  538 	DJNZ LOOP_10
   01DD 08            [ 4]  539 	EX AF,AF'
   01DE D9            [ 4]  540 	EXX
   01DF C9            [10]  541 	ret
   01E0                     542 _delay_10us_end::
                            543 ;smz80.h:821: void delay_100us(){
                            544 ;	---------------------------------
                            545 ; Function delay_100us
                            546 ; ---------------------------------
   01E0                     547 _delay_100us_start::
   01E0                     548 _delay_100us:
                            549 ;smz80.h:831: __endasm;
   01E0 D9            [ 4]  550 	EXX
   01E1 08            [ 4]  551 	EX AF,AF'
   01E2 06 3A         [ 7]  552 	LD B,#0x3A
   01E4                     553 	    LOOP_100:
   01E4 10 FE         [13]  554 	DJNZ LOOP_100
   01E6 08            [ 4]  555 	EX AF,AF'
   01E7 D9            [ 4]  556 	EXX
   01E8 C9            [10]  557 	ret
   01E9                     558 _delay_100us_end::
                            559 ;smz80.h:835: void delay_ms(int ms){
                            560 ;	---------------------------------
                            561 ; Function delay_ms
                            562 ; ---------------------------------
   01E9                     563 _delay_ms_start::
   01E9                     564 _delay_ms:
                            565 ;smz80.h:839: while(ms--)
   01E9 C1            [10]  566 	pop	bc
   01EA D1            [10]  567 	pop	de
   01EB D5            [11]  568 	push	de
   01EC C5            [11]  569 	push	bc
   01ED                     570 00102$:
   01ED 43            [ 4]  571 	ld	b,e
   01EE 4A            [ 4]  572 	ld	c,d
   01EF 1B            [ 6]  573 	dec	de
   01F0 79            [ 4]  574 	ld	a,c
   01F1 B0            [ 4]  575 	or	a,b
   01F2 C8            [11]  576 	ret	Z
                            577 ;smz80.h:840: for(i=0;i<0x106;i++)
   01F3 01 06 01      [10]  578 	ld	bc,#0x0106
   01F6                     579 00107$:
                            580 ;smz80.h:841: __asm__("nop");
   01F6 00            [ 4]  581 	nop
   01F7 0B            [ 6]  582 	dec	bc
                            583 ;smz80.h:840: for(i=0;i<0x106;i++)
   01F8 78            [ 4]  584 	ld	a,b
   01F9 B1            [ 4]  585 	or	a,c
   01FA 20 FA         [12]  586 	jr	NZ,00107$
   01FC 18 EF         [12]  587 	jr	00102$
   01FE C9            [10]  588 	ret
   01FF                     589 _delay_ms_end::
                            590 ;smz80.h:848: void putchar(char c){
                            591 ;	---------------------------------
                            592 ; Function putchar
                            593 ; ---------------------------------
   01FF                     594 _putchar_start::
   01FF                     595 _putchar:
                            596 ;smz80.h:851: if(c=='\n')
   01FF 21 02 00      [10]  597 	ld	hl, #2+0
   0202 39            [11]  598 	add	hl, sp
   0203 7E            [ 7]  599 	ld	a, (hl)
   0204 D6 0A         [ 7]  600 	sub	a, #0x0A
   0206 20 08         [12]  601 	jr	NZ,00102$
                            602 ;smz80.h:852: uart_write('\r');
   0208 3E 0D         [ 7]  603 	ld	a,#0x0D
   020A F5            [11]  604 	push	af
   020B 33            [ 6]  605 	inc	sp
   020C CDrABr00      [17]  606 	call	_uart_write
   020F 33            [ 6]  607 	inc	sp
   0210                     608 00102$:
                            609 ;smz80.h:853: uart_write(c);
   0210 21 02 00      [10]  610 	ld	hl, #2+0
   0213 39            [11]  611 	add	hl, sp
   0214 7E            [ 7]  612 	ld	a, (hl)
   0215 F5            [11]  613 	push	af
   0216 33            [ 6]  614 	inc	sp
   0217 CDrABr00      [17]  615 	call	_uart_write
   021A 33            [ 6]  616 	inc	sp
   021B C9            [10]  617 	ret
   021C                     618 _putchar_end::
                            619 ;smz80.h:858: char getchar(){
                            620 ;	---------------------------------
                            621 ; Function getchar
                            622 ; ---------------------------------
   021C                     623 _getchar_start::
   021C                     624 _getchar:
                            625 ;smz80.h:861: return uart_read();
   021C C3rBCr00      [10]  626 	jp	_uart_read
   021F                     627 _getchar_end::
                            628 ;main.c:109: ISR_NMI(){
                            629 ;	---------------------------------
                            630 ; Function isr_vector66
                            631 ; ---------------------------------
   021F                     632 _isr_vector66_start::
   021F                     633 _isr_vector66:
   021F F5            [11]  634 	push	af
   0220 C5            [11]  635 	push	bc
   0221 D5            [11]  636 	push	de
   0222 E5            [11]  637 	push	hl
   0223 FD E5         [15]  638 	push	iy
                            639 ;main.c:111: }
   0225 FD E1         [14]  640 	pop	iy
   0227 E1            [10]  641 	pop	hl
   0228 D1            [10]  642 	pop	de
   0229 C1            [10]  643 	pop	bc
   022A F1            [10]  644 	pop	af
   022B ED 45         [14]  645 	retn
   022D                     646 _isr_vector66_end::
   022D                     647 _PROGMEM:
   022D 00 00               648 	.dw #0x0000
   022F 01 00               649 	.dw #0x0001
   0231 FF 00               650 	.dw #0x00FF
   0233 32 00               651 	.dw #0x0032
   0235 01 00               652 	.dw #0x0001
   0237 00 01               653 	.dw #0x0100
   0239 02 00               654 	.dw #0x0002
   023B 00 07               655 	.dw #0x0700
   023D 03 00               656 	.dw #0x0003
   023F 30 10               657 	.dw #0x1030
   0241 04 00               658 	.dw #0x0004
   0243 00 00               659 	.dw #0x0000
   0245 08 00               660 	.dw #0x0008
   0247 02 02               661 	.dw #0x0202
   0249 09 00               662 	.dw #0x0009
   024B 00 00               663 	.dw #0x0000
   024D 0A 00               664 	.dw #0x000A
   024F 00 00               665 	.dw #0x0000
   0251 0C 00               666 	.dw #0x000C
   0253 00 00               667 	.dw #0x0000
   0255 0D 00               668 	.dw #0x000D
   0257 00 00               669 	.dw #0x0000
   0259 0F 00               670 	.dw #0x000F
   025B 00 00               671 	.dw #0x0000
   025D 10 00               672 	.dw #0x0010
   025F 00 00               673 	.dw #0x0000
   0261 11 00               674 	.dw #0x0011
   0263 07 00               675 	.dw #0x0007
   0265 12 00               676 	.dw #0x0012
   0267 00 00               677 	.dw #0x0000
   0269 13 00               678 	.dw #0x0013
   026B 00 00               679 	.dw #0x0000
   026D FF 00               680 	.dw #0x00FF
   026F C8 00               681 	.dw #0x00C8
   0271 10 00               682 	.dw #0x0010
   0273 90 16               683 	.dw #0x1690
   0275 11 00               684 	.dw #0x0011
   0277 27 02               685 	.dw #0x0227
   0279 FF 00               686 	.dw #0x00FF
   027B 32 00               687 	.dw #0x0032
   027D 12 00               688 	.dw #0x0012
   027F 1A 00               689 	.dw #0x001A
   0281 FF 00               690 	.dw #0x00FF
   0283 32 00               691 	.dw #0x0032
   0285 13 00               692 	.dw #0x0013
   0287 00 18               693 	.dw #0x1800
   0289 29 00               694 	.dw #0x0029
   028B 2A 00               695 	.dw #0x002A
   028D FF 00               696 	.dw #0x00FF
   028F 32 00               697 	.dw #0x0032
   0291 30 00               698 	.dw #0x0030
   0293 00 00               699 	.dw #0x0000
   0295 31 00               700 	.dw #0x0031
   0297 00 00               701 	.dw #0x0000
   0299 32 00               702 	.dw #0x0032
   029B 00 00               703 	.dw #0x0000
   029D 35 00               704 	.dw #0x0035
   029F 06 02               705 	.dw #0x0206
   02A1 36 00               706 	.dw #0x0036
   02A3 08 08               707 	.dw #0x0808
   02A5 37 00               708 	.dw #0x0037
   02A7 07 00               709 	.dw #0x0007
   02A9 38 00               710 	.dw #0x0038
   02AB 01 02               711 	.dw #0x0201
   02AD 39 00               712 	.dw #0x0039
   02AF 00 00               713 	.dw #0x0000
   02B1 3C 00               714 	.dw #0x003C
   02B3 00 00               715 	.dw #0x0000
   02B5 3D 00               716 	.dw #0x003D
   02B7 00 00               717 	.dw #0x0000
   02B9 20 00               718 	.dw #0x0020
   02BB 00 00               719 	.dw #0x0000
   02BD 21 00               720 	.dw #0x0021
   02BF 00 00               721 	.dw #0x0000
   02C1 50 00               722 	.dw #0x0050
   02C3 00 00               723 	.dw #0x0000
   02C5 51 00               724 	.dw #0x0051
   02C7 EF 00               725 	.dw #0x00EF
   02C9 52 00               726 	.dw #0x0052
   02CB 00 00               727 	.dw #0x0000
   02CD 53 00               728 	.dw #0x0053
   02CF 3F 01               729 	.dw #0x013F
   02D1 60 00               730 	.dw #0x0060
   02D3 00 A7               731 	.dw #0xA700
   02D5 61 00               732 	.dw #0x0061
   02D7 03 00               733 	.dw #0x0003
   02D9 6A 00               734 	.dw #0x006A
   02DB 00 00               735 	.dw #0x0000
   02DD 90 00               736 	.dw #0x0090
   02DF 10 00               737 	.dw #0x0010
   02E1 92 00               738 	.dw #0x0092
   02E3 00 00               739 	.dw #0x0000
   02E5 93 00               740 	.dw #0x0093
   02E7 03 00               741 	.dw #0x0003
   02E9 95 00               742 	.dw #0x0095
   02EB 00 11               743 	.dw #0x1100
   02ED 97 00               744 	.dw #0x0097
   02EF 00 00               745 	.dw #0x0000
   02F1 98 00               746 	.dw #0x0098
   02F3 00 00               747 	.dw #0x0000
   02F5 07 00               748 	.dw #0x0007
   02F7 33 01               749 	.dw #0x0133
                            750 ;main.c:113: ISR_INT_38(){
                            751 ;	---------------------------------
                            752 ; Function isr_vector38
                            753 ; ---------------------------------
   02F9                     754 _isr_vector38_start::
   02F9                     755 _isr_vector38:
   02F9 F5            [11]  756 	push	af
   02FA C5            [11]  757 	push	bc
   02FB D5            [11]  758 	push	de
   02FC E5            [11]  759 	push	hl
   02FD FD E5         [15]  760 	push	iy
                            761 ;main.c:115: }
   02FF FD E1         [14]  762 	pop	iy
   0301 E1            [10]  763 	pop	hl
   0302 D1            [10]  764 	pop	de
   0303 C1            [10]  765 	pop	bc
   0304 F1            [10]  766 	pop	af
   0305 ED 4D         [14]  767 	reti
   0307                     768 _isr_vector38_end::
                            769 ;main.c:118: int main(){
                            770 ;	---------------------------------
                            771 ; Function main
                            772 ; ---------------------------------
   0307                     773 _main_start::
   0307                     774 _main:
                            775 ;main.c:121: system_init(); 
   0307 CDr0Dr03      [17]  776 	call	_system_init
                            777 ;main.c:124: while(TRUE){
   030A                     778 00102$:
                            779 ;main.c:125: sleep();    //Entra en modo sleep (HALT)
   030A 76            [ 4]  780 	HALT
   030B 18 FD         [12]  781 	jr	00102$
   030D                     782 _main_end::
                            783 ;main.c:130: void system_init(){
                            784 ;	---------------------------------
                            785 ; Function system_init
                            786 ; ---------------------------------
   030D                     787 _system_init_start::
   030D                     788 _system_init:
                            789 ;main.c:131: PPI_CTRL = 0x89; //Palabra de control PA y PB salida PCH entrada PCD salida
   030D 3E 89         [ 7]  790 	ld	a,#0x89
   030F D3 43         [11]  791 	out	(_PPI_CTRL),a
                            792 ;main.c:132: lcd_init();   
   0311 C3r14r03      [10]  793 	jp	_lcd_init
   0314                     794 _system_init_end::
                            795 ;main.c:135: void lcd_init(){
                            796 ;	---------------------------------
                            797 ; Function lcd_init
                            798 ; ---------------------------------
   0314                     799 _lcd_init_start::
   0314                     800 _lcd_init:
   0314 DD E5         [15]  801 	push	ix
   0316 DD 21 00 00   [14]  802 	ld	ix,#0
   031A DD 39         [15]  803 	add	ix,sp
   031C F5            [11]  804 	push	af
                            805 ;main.c:136: uint8_t i = 0;
   031D 0E 00         [ 7]  806 	ld	c,#0x00
                            807 ;main.c:142: CS_ACTIVE;
   031F DB 40         [11]  808 	in	a,(_PPI_PORTA)
   0321 E6 FC         [ 7]  809 	and	a, #0xFC
   0323 D3 40         [11]  810 	out	(_PPI_PORTA),a
                            811 ;main.c:143: while(i < sizeof(PROGMEM) / sizeof(uint16_t)) 
   0325                     812 00104$:
   0325 79            [ 4]  813 	ld	a,c
   0326 D6 66         [ 7]  814 	sub	a, #0x66
   0328 30 3A         [12]  815 	jr	NC,00106$
                            816 ;main.c:145: a = PROGMEM[i++];
   032A 69            [ 4]  817 	ld	l,c
   032B 0C            [ 4]  818 	inc	c
   032C 26 00         [ 7]  819 	ld	h,#0x00
   032E 29            [11]  820 	add	hl, hl
   032F 11r2Dr02      [10]  821 	ld	de,#_PROGMEM
   0332 19            [11]  822 	add	hl,de
   0333 7E            [ 7]  823 	ld	a,(hl)
   0334 DD 77 FE      [19]  824 	ld	-2 (ix),a
   0337 23            [ 6]  825 	inc	hl
   0338 7E            [ 7]  826 	ld	a,(hl)
   0339 DD 77 FF      [19]  827 	ld	-1 (ix),a
                            828 ;main.c:146: d = PROGMEM[i++];
   033C 69            [ 4]  829 	ld	l,c
   033D 0C            [ 4]  830 	inc	c
   033E 26 00         [ 7]  831 	ld	h,#0x00
   0340 29            [11]  832 	add	hl, hl
   0341 11r2Dr02      [10]  833 	ld	de,#_PROGMEM
   0344 19            [11]  834 	add	hl,de
   0345 5E            [ 7]  835 	ld	e,(hl)
   0346 23            [ 6]  836 	inc	hl
   0347 56            [ 7]  837 	ld	d,(hl)
                            838 ;main.c:148: if(a == TFTLCD_DELAY)
   0348 DD 7E FE      [19]  839 	ld	a,-2 (ix)
   034B 3C            [ 4]  840 	inc	a
   034C 20 06         [12]  841 	jr	NZ,00121$
   034E DD 7E FF      [19]  842 	ld	a,-1 (ix)
   0351 B7            [ 4]  843 	or	a, a
   0352 28 D1         [12]  844 	jr	Z,00104$
   0354                     845 00121$:
                            846 ;main.c:154: writeRegister16(a, d);
   0354 63            [ 4]  847 	ld	h,e
   0355 DD 56 FE      [19]  848 	ld	d,-2 (ix)
   0358 C5            [11]  849 	push	bc
   0359 E5            [11]  850 	push	hl
   035A 33            [ 6]  851 	inc	sp
   035B D5            [11]  852 	push	de
   035C 33            [ 6]  853 	inc	sp
   035D CDrB0r04      [17]  854 	call	_writeRegister16
   0360 F1            [10]  855 	pop	af
   0361 C1            [10]  856 	pop	bc
   0362 18 C1         [12]  857 	jr	00104$
   0364                     858 00106$:
                            859 ;main.c:157: CS_ACTIVE;
   0364 DB 40         [11]  860 	in	a,(_PPI_PORTA)
   0366 E6 FC         [ 7]  861 	and	a, #0xFC
   0368 D3 40         [11]  862 	out	(_PPI_PORTA),a
                            863 ;main.c:159: writeRegister16(0x0003, a);
   036A 21 03 30      [10]  864 	ld	hl,#0x3003
   036D E5            [11]  865 	push	hl
   036E CDrB0r04      [17]  866 	call	_writeRegister16
                            867 ;main.c:160: setAddrWindow(0, 0, TFTWIDTH-1, TFTHEIGHT-1);
   0371 21 3F 01      [10]  868 	ld	hl, #0x013F
   0374 E3            [19]  869 	ex	(sp),hl
   0375 21 EF 00      [10]  870 	ld	hl,#0x00EF
   0378 E5            [11]  871 	push	hl
   0379 2E 00         [ 7]  872 	ld	l, #0x00
   037B E5            [11]  873 	push	hl
   037C 2E 00         [ 7]  874 	ld	l, #0x00
   037E E5            [11]  875 	push	hl
   037F CDrF5r04      [17]  876 	call	_setAddrWindow
   0382 21 08 00      [10]  877 	ld	hl,#8
   0385 39            [11]  878 	add	hl,sp
   0386 F9            [ 6]  879 	ld	sp,hl
   0387 DD F9         [10]  880 	ld	sp, ix
   0389 DD E1         [14]  881 	pop	ix
   038B C9            [10]  882 	ret
   038C                     883 _lcd_init_end::
                            884 ;main.c:164: void writeRegister24(uint8_t r, uint32_t d) {
                            885 ;	---------------------------------
                            886 ; Function writeRegister24
                            887 ; ---------------------------------
   038C                     888 _writeRegister24_start::
   038C                     889 _writeRegister24:
                            890 ;main.c:165: CS_ACTIVE;
   038C DB 40         [11]  891 	in	a,(_PPI_PORTA)
   038E E6 FC         [ 7]  892 	and	a, #0xFC
   0390 D3 40         [11]  893 	out	(_PPI_PORTA),a
                            894 ;main.c:166: CD_COMMAND;
   0392 DB 40         [11]  895 	in	a,(_PPI_PORTA)
   0394 E6 FD         [ 7]  896 	and	a, #0xFD
   0396 D3 40         [11]  897 	out	(_PPI_PORTA),a
                            898 ;main.c:167: write8(r);
   0398 21 02 00      [10]  899 	ld	hl, #2+0
   039B 39            [11]  900 	add	hl, sp
   039C 7E            [ 7]  901 	ld	a, (hl)
   039D F5            [11]  902 	push	af
   039E 33            [ 6]  903 	inc	sp
   039F CDrE1r04      [17]  904 	call	_write8
   03A2 33            [ 6]  905 	inc	sp
                            906 ;main.c:168: CD_DATA;
   03A3 DB 40         [11]  907 	in	a,(_PPI_PORTA)
   03A5 CB CF         [ 8]  908 	set	1, a
   03A7 D3 40         [11]  909 	out	(_PPI_PORTA),a
                            910 ;main.c:170: write8(d >> 16);
   03A9 F5            [11]  911 	push	af
   03AA FD 21 05 00   [14]  912 	ld	iy,#5
   03AE FD 39         [15]  913 	add	iy,sp
   03B0 FD 66 00      [19]  914 	ld	h,0 (iy)
   03B3 FD 6E 01      [19]  915 	ld	l,1 (iy)
   03B6 FD 56 02      [19]  916 	ld	d,2 (iy)
   03B9 FD 5E 03      [19]  917 	ld	e,3 (iy)
   03BC F1            [10]  918 	pop	af
   03BD 06 10         [ 7]  919 	ld	b,#0x10
   03BF                     920 00103$:
   03BF CB 3B         [ 8]  921 	srl	e
   03C1 CB 1A         [ 8]  922 	rr	d
   03C3 CB 1D         [ 8]  923 	rr	l
   03C5 CB 1C         [ 8]  924 	rr	h
   03C7 10 F6         [13]  925 	djnz	00103$
   03C9 E5            [11]  926 	push	hl
   03CA 33            [ 6]  927 	inc	sp
   03CB CDrE1r04      [17]  928 	call	_write8
   03CE 33            [ 6]  929 	inc	sp
                            930 ;main.c:172: write8(d >> 8);
   03CF F5            [11]  931 	push	af
   03D0 FD 21 05 00   [14]  932 	ld	iy,#5
   03D4 FD 39         [15]  933 	add	iy,sp
   03D6 FD 66 00      [19]  934 	ld	h,0 (iy)
   03D9 FD 6E 01      [19]  935 	ld	l,1 (iy)
   03DC FD 56 02      [19]  936 	ld	d,2 (iy)
   03DF FD 5E 03      [19]  937 	ld	e,3 (iy)
   03E2 F1            [10]  938 	pop	af
   03E3 06 08         [ 7]  939 	ld	b,#0x08
   03E5                     940 00105$:
   03E5 CB 3B         [ 8]  941 	srl	e
   03E7 CB 1A         [ 8]  942 	rr	d
   03E9 CB 1D         [ 8]  943 	rr	l
   03EB CB 1C         [ 8]  944 	rr	h
   03ED 10 F6         [13]  945 	djnz	00105$
   03EF E5            [11]  946 	push	hl
   03F0 33            [ 6]  947 	inc	sp
   03F1 CDrE1r04      [17]  948 	call	_write8
   03F4 33            [ 6]  949 	inc	sp
                            950 ;main.c:174: write8(d);
   03F5 FD 21 03 00   [14]  951 	ld	iy,#3
   03F9 FD 39         [15]  952 	add	iy,sp
   03FB FD 66 00      [19]  953 	ld	h,0 (iy)
   03FE E5            [11]  954 	push	hl
   03FF 33            [ 6]  955 	inc	sp
   0400 CDrE1r04      [17]  956 	call	_write8
   0403 33            [ 6]  957 	inc	sp
                            958 ;main.c:175: CS_IDLE;
   0404 DB 40         [11]  959 	in	a,(_PPI_PORTA)
   0406 F6 03         [ 7]  960 	or	a, #0x03
   0408 D3 40         [11]  961 	out	(_PPI_PORTA),a
   040A C9            [10]  962 	ret
   040B                     963 _writeRegister24_end::
                            964 ;main.c:180: void writeRegister32(uint8_t r, uint32_t d) {
                            965 ;	---------------------------------
                            966 ; Function writeRegister32
                            967 ; ---------------------------------
   040B                     968 _writeRegister32_start::
   040B                     969 _writeRegister32:
                            970 ;main.c:181: CS_ACTIVE;
   040B DB 40         [11]  971 	in	a,(_PPI_PORTA)
   040D E6 FC         [ 7]  972 	and	a, #0xFC
   040F D3 40         [11]  973 	out	(_PPI_PORTA),a
                            974 ;main.c:182: CD_COMMAND;
   0411 DB 40         [11]  975 	in	a,(_PPI_PORTA)
   0413 E6 FD         [ 7]  976 	and	a, #0xFD
   0415 D3 40         [11]  977 	out	(_PPI_PORTA),a
                            978 ;main.c:183: write8(r);
   0417 21 02 00      [10]  979 	ld	hl, #2+0
   041A 39            [11]  980 	add	hl, sp
   041B 7E            [ 7]  981 	ld	a, (hl)
   041C F5            [11]  982 	push	af
   041D 33            [ 6]  983 	inc	sp
   041E CDrE1r04      [17]  984 	call	_write8
   0421 33            [ 6]  985 	inc	sp
                            986 ;main.c:184: CD_DATA;
   0422 DB 40         [11]  987 	in	a,(_PPI_PORTA)
   0424 CB CF         [ 8]  988 	set	1, a
   0426 D3 40         [11]  989 	out	(_PPI_PORTA),a
                            990 ;main.c:186: write8(d >> 24);
   0428 F5            [11]  991 	push	af
   0429 FD 21 05 00   [14]  992 	ld	iy,#5
   042D FD 39         [15]  993 	add	iy,sp
   042F FD 66 00      [19]  994 	ld	h,0 (iy)
   0432 FD 6E 01      [19]  995 	ld	l,1 (iy)
   0435 FD 56 02      [19]  996 	ld	d,2 (iy)
   0438 FD 5E 03      [19]  997 	ld	e,3 (iy)
   043B F1            [10]  998 	pop	af
   043C 06 18         [ 7]  999 	ld	b,#0x18
   043E                    1000 00103$:
   043E CB 3B         [ 8] 1001 	srl	e
   0440 CB 1A         [ 8] 1002 	rr	d
   0442 CB 1D         [ 8] 1003 	rr	l
   0444 CB 1C         [ 8] 1004 	rr	h
   0446 10 F6         [13] 1005 	djnz	00103$
   0448 E5            [11] 1006 	push	hl
   0449 33            [ 6] 1007 	inc	sp
   044A CDrE1r04      [17] 1008 	call	_write8
   044D 33            [ 6] 1009 	inc	sp
                           1010 ;main.c:188: write8(d >> 16);
   044E F5            [11] 1011 	push	af
   044F FD 21 05 00   [14] 1012 	ld	iy,#5
   0453 FD 39         [15] 1013 	add	iy,sp
   0455 FD 66 00      [19] 1014 	ld	h,0 (iy)
   0458 FD 6E 01      [19] 1015 	ld	l,1 (iy)
   045B FD 56 02      [19] 1016 	ld	d,2 (iy)
   045E FD 5E 03      [19] 1017 	ld	e,3 (iy)
   0461 F1            [10] 1018 	pop	af
   0462 06 10         [ 7] 1019 	ld	b,#0x10
   0464                    1020 00105$:
   0464 CB 3B         [ 8] 1021 	srl	e
   0466 CB 1A         [ 8] 1022 	rr	d
   0468 CB 1D         [ 8] 1023 	rr	l
   046A CB 1C         [ 8] 1024 	rr	h
   046C 10 F6         [13] 1025 	djnz	00105$
   046E E5            [11] 1026 	push	hl
   046F 33            [ 6] 1027 	inc	sp
   0470 CDrE1r04      [17] 1028 	call	_write8
   0473 33            [ 6] 1029 	inc	sp
                           1030 ;main.c:190: write8(d >> 8);
   0474 F5            [11] 1031 	push	af
   0475 FD 21 05 00   [14] 1032 	ld	iy,#5
   0479 FD 39         [15] 1033 	add	iy,sp
   047B FD 66 00      [19] 1034 	ld	h,0 (iy)
   047E FD 6E 01      [19] 1035 	ld	l,1 (iy)
   0481 FD 56 02      [19] 1036 	ld	d,2 (iy)
   0484 FD 5E 03      [19] 1037 	ld	e,3 (iy)
   0487 F1            [10] 1038 	pop	af
   0488 06 08         [ 7] 1039 	ld	b,#0x08
   048A                    1040 00107$:
   048A CB 3B         [ 8] 1041 	srl	e
   048C CB 1A         [ 8] 1042 	rr	d
   048E CB 1D         [ 8] 1043 	rr	l
   0490 CB 1C         [ 8] 1044 	rr	h
   0492 10 F6         [13] 1045 	djnz	00107$
   0494 E5            [11] 1046 	push	hl
   0495 33            [ 6] 1047 	inc	sp
   0496 CDrE1r04      [17] 1048 	call	_write8
   0499 33            [ 6] 1049 	inc	sp
                           1050 ;main.c:192: write8(d);
   049A FD 21 03 00   [14] 1051 	ld	iy,#3
   049E FD 39         [15] 1052 	add	iy,sp
   04A0 FD 66 00      [19] 1053 	ld	h,0 (iy)
   04A3 E5            [11] 1054 	push	hl
   04A4 33            [ 6] 1055 	inc	sp
   04A5 CDrE1r04      [17] 1056 	call	_write8
   04A8 33            [ 6] 1057 	inc	sp
                           1058 ;main.c:193: CS_IDLE;
   04A9 DB 40         [11] 1059 	in	a,(_PPI_PORTA)
   04AB F6 03         [ 7] 1060 	or	a, #0x03
   04AD D3 40         [11] 1061 	out	(_PPI_PORTA),a
   04AF C9            [10] 1062 	ret
   04B0                    1063 _writeRegister32_end::
                           1064 ;main.c:198: void writeRegister16(uint8_t a, uint8_t d) 
                           1065 ;	---------------------------------
                           1066 ; Function writeRegister16
                           1067 ; ---------------------------------
   04B0                    1068 _writeRegister16_start::
   04B0                    1069 _writeRegister16:
                           1070 ;main.c:202: lo = (a); 
   04B0 21 02 00      [10] 1071 	ld	hl, #2+0
   04B3 39            [11] 1072 	add	hl, sp
   04B4 56            [ 7] 1073 	ld	d, (hl)
                           1074 ;main.c:203: CD_COMMAND; 
   04B5 DB 40         [11] 1075 	in	a,(_PPI_PORTA)
   04B7 E6 FD         [ 7] 1076 	and	a, #0xFD
   04B9 D3 40         [11] 1077 	out	(_PPI_PORTA),a
                           1078 ;main.c:204: write8(hi); 
   04BB D5            [11] 1079 	push	de
   04BC AF            [ 4] 1080 	xor	a, a
   04BD F5            [11] 1081 	push	af
   04BE 33            [ 6] 1082 	inc	sp
   04BF CDrE1r04      [17] 1083 	call	_write8
   04C2 33            [ 6] 1084 	inc	sp
   04C3 33            [ 6] 1085 	inc	sp
   04C4 CDrE1r04      [17] 1086 	call	_write8
   04C7 33            [ 6] 1087 	inc	sp
                           1088 ;main.c:207: lo = (d); 
   04C8 21 03 00      [10] 1089 	ld	hl, #3+0
   04CB 39            [11] 1090 	add	hl, sp
   04CC 56            [ 7] 1091 	ld	d, (hl)
                           1092 ;main.c:208: CD_DATA; 
   04CD DB 40         [11] 1093 	in	a,(_PPI_PORTA)
   04CF CB CF         [ 8] 1094 	set	1, a
   04D1 D3 40         [11] 1095 	out	(_PPI_PORTA),a
                           1096 ;main.c:209: write8(hi); 
   04D3 D5            [11] 1097 	push	de
   04D4 AF            [ 4] 1098 	xor	a, a
   04D5 F5            [11] 1099 	push	af
   04D6 33            [ 6] 1100 	inc	sp
   04D7 CDrE1r04      [17] 1101 	call	_write8
   04DA 33            [ 6] 1102 	inc	sp
   04DB 33            [ 6] 1103 	inc	sp
   04DC CDrE1r04      [17] 1104 	call	_write8
   04DF 33            [ 6] 1105 	inc	sp
   04E0 C9            [10] 1106 	ret
   04E1                    1107 _writeRegister16_end::
                           1108 ;main.c:213: void write8(uint8_t d) 
                           1109 ;	---------------------------------
                           1110 ; Function write8
                           1111 ; ---------------------------------
   04E1                    1112 _write8_start::
   04E1                    1113 _write8:
                           1114 ;main.c:215: PPI_PORTA = d;
   04E1 21 02 00      [10] 1115 	ld	hl, #2+0
   04E4 39            [11] 1116 	add	hl, sp
   04E5 7E            [ 7] 1117 	ld	a, (hl)
   04E6 D3 40         [11] 1118 	out	(_PPI_PORTA),a
                           1119 ;main.c:216: WR_STROBE; 
   04E8 DB 40         [11] 1120 	in	a,(_PPI_PORTA)
   04EA E6 FE         [ 7] 1121 	and	a, #0xFE
   04EC D3 40         [11] 1122 	out	(_PPI_PORTA),a
   04EE DB 40         [11] 1123 	in	a,(_PPI_PORTA)
   04F0 CB C7         [ 8] 1124 	set	0, a
   04F2 D3 40         [11] 1125 	out	(_PPI_PORTA),a
   04F4 C9            [10] 1126 	ret
   04F5                    1127 _write8_end::
                           1128 ;main.c:219: void setAddrWindow(int x1, int y1, int x2, int y2) 
                           1129 ;	---------------------------------
                           1130 ; Function setAddrWindow
                           1131 ; ---------------------------------
   04F5                    1132 _setAddrWindow_start::
   04F5                    1133 _setAddrWindow:
                           1134 ;main.c:222: CS_ACTIVE;
   04F5 DB 40         [11] 1135 	in	a,(_PPI_PORTA)
   04F7 E6 FC         [ 7] 1136 	and	a, #0xFC
   04F9 D3 40         [11] 1137 	out	(_PPI_PORTA),a
                           1138 ;main.c:223: x  = x1;
   04FB D1            [10] 1139 	pop	de
   04FC C1            [10] 1140 	pop	bc
   04FD C5            [11] 1141 	push	bc
   04FE D5            [11] 1142 	push	de
                           1143 ;main.c:224: y  = y1;
   04FF FD 21 04 00   [14] 1144 	ld	iy,#4
   0503 FD 39         [15] 1145 	add	iy,sp
   0505 FD 56 00      [19] 1146 	ld	d,0 (iy)
   0508 FD 6E 01      [19] 1147 	ld	l,1 (iy)
                           1148 ;main.c:226: writeRegister16(0x0050, x1); 
   050B 59            [ 4] 1149 	ld	e,c
   050C E5            [11] 1150 	push	hl
   050D D5            [11] 1151 	push	de
   050E 53            [ 4] 1152 	ld	d, e
   050F 1E 50         [ 7] 1153 	ld	e,#0x50
   0511 D5            [11] 1154 	push	de
   0512 CDrB0r04      [17] 1155 	call	_writeRegister16
   0515 F1            [10] 1156 	pop	af
   0516 D1            [10] 1157 	pop	de
   0517 E1            [10] 1158 	pop	hl
                           1159 ;main.c:227: writeRegister16(0x0051, x2);
   0518 FD 21 06 00   [14] 1160 	ld	iy,#6
   051C FD 39         [15] 1161 	add	iy,sp
   051E FD 66 00      [19] 1162 	ld	h,0 (iy)
   0521 E5            [11] 1163 	push	hl
   0522 D5            [11] 1164 	push	de
   0523 E5            [11] 1165 	push	hl
   0524 33            [ 6] 1166 	inc	sp
   0525 3E 51         [ 7] 1167 	ld	a,#0x51
   0527 F5            [11] 1168 	push	af
   0528 33            [ 6] 1169 	inc	sp
   0529 CDrB0r04      [17] 1170 	call	_writeRegister16
   052C F1            [10] 1171 	pop	af
   052D D1            [10] 1172 	pop	de
   052E E1            [10] 1173 	pop	hl
                           1174 ;main.c:228: writeRegister16(0x0052, y1);
   052F D5            [11] 1175 	push	de
   0530 1E 52         [ 7] 1176 	ld	e, #0x52
   0532 D5            [11] 1177 	push	de
   0533 CDrB0r04      [17] 1178 	call	_writeRegister16
   0536 F1            [10] 1179 	pop	af
   0537 D1            [10] 1180 	pop	de
                           1181 ;main.c:229: writeRegister16(0x0053, y2);
   0538 FD 21 08 00   [14] 1182 	ld	iy,#8
   053C FD 39         [15] 1183 	add	iy,sp
   053E FD 66 00      [19] 1184 	ld	h,0 (iy)
   0541 D5            [11] 1185 	push	de
   0542 E5            [11] 1186 	push	hl
   0543 33            [ 6] 1187 	inc	sp
   0544 3E 53         [ 7] 1188 	ld	a,#0x53
   0546 F5            [11] 1189 	push	af
   0547 33            [ 6] 1190 	inc	sp
   0548 CDrB0r04      [17] 1191 	call	_writeRegister16
   054B F1            [10] 1192 	pop	af
   054C D1            [10] 1193 	pop	de
                           1194 ;main.c:230: writeRegister16(0x0020, x );
   054D D5            [11] 1195 	push	de
   054E 53            [ 4] 1196 	ld	d, e
   054F 1E 20         [ 7] 1197 	ld	e,#0x20
   0551 D5            [11] 1198 	push	de
   0552 CDrB0r04      [17] 1199 	call	_writeRegister16
   0555 F1            [10] 1200 	pop	af
   0556 D1            [10] 1201 	pop	de
                           1202 ;main.c:231: writeRegister16(0x0021, y );
   0557 1E 21         [ 7] 1203 	ld	e, #0x21
   0559 D5            [11] 1204 	push	de
   055A CDrB0r04      [17] 1205 	call	_writeRegister16
   055D F1            [10] 1206 	pop	af
   055E C9            [10] 1207 	ret
   055F                    1208 _setAddrWindow_end::
                           1209 	.area _CODE
                           1210 	.area _INITIALIZER
                           1211 	.area _CABS (ABS)
